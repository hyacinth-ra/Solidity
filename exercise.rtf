{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red79\green123\blue61;\red0\green0\blue0;\red172\green172\blue193;
\red70\green137\blue204;\red212\green212\blue212;\red167\green197\blue152;}
{\*\expandedcolortbl;;\cssrgb\c37647\c54510\c30588;\csgray\c0\c0;\cssrgb\c72941\c73333\c80000;
\cssrgb\c33725\c61176\c83922;\cssrgb\c86275\c86275\c86275;\cssrgb\c70980\c80784\c65882;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 // SPDX-License-Identifier: MIT\cf4 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \strokec5 pragma\cf4 \strokec4  \cf5 \strokec5 solidity\cf4 \strokec4  \cf6 \strokec6 >=\cf7 \strokec7 0.8.2\cf4 \strokec4  \cf6 \strokec6 <\cf7 \strokec7 0.9.0\cf6 \strokec6 ;\cf4 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 // contract test\{\cf4 \strokec4 \
\cf2 \strokec2 //     // mapping( uint => bool ) name;\cf4 \strokec4 \
\
\cf2 \strokec2 //     // function addItem (uint key, bool value) public\{\cf4 \strokec4 \
\cf2 \strokec2 //     //     name[key] = value;\cf4 \strokec4 \
\cf2 \strokec2 //     // \}\cf4 \strokec4 \
\
\cf2 \strokec2 //     // function getItem ( uint key) public view returns(bool)\{\cf4 \strokec4 \
\cf2 \strokec2 //     //     return name[key];\cf4 \strokec4 \
\cf2 \strokec2 //     // \} \cf4 \strokec4 \
\
\cf2 \strokec2 //     // mapping(uint => uint) map1;\cf4 \strokec4 \
\
\cf2 \strokec2 //     // function x() public\{\cf4 \strokec4 \
\cf2 \strokec2 //     //     mapping(uint =>uint) storage map2 = map1;\cf4 \strokec4 \
\cf2 \strokec2 //     //     map2[0] = 1;\cf4 \strokec4 \
\cf2 \strokec2 //     // \}\cf4 \strokec4 \
\
\cf2 \strokec2 //     // function getItemmap1 ( uint key) public view returns(uint)\{\cf4 \strokec4 \
\cf2 \strokec2 //     //     return map1[key];\cf4 \strokec4 \
\cf2 \strokec2 //     // \} \cf4 \strokec4 \
\
\cf2 \strokec2 //     // function viewGas() public view returns(uint)\{\cf4 \strokec4 \
\cf2 \strokec2 //     //     return gasleft();\cf4 \strokec4 \
\cf2 \strokec2 //     // \}\cf4 \strokec4 \
\
\cf2 \strokec2 //     /////////////////// Receiving Eth ///////////////////\cf4 \strokec4 \
\cf2 \strokec2 //     // uint public receiver;\cf4 \strokec4 \
\cf2 \strokec2 //     // uint public fallbackReceived;\cf4 \strokec4 \
\cf2 \strokec2 //     // uint public payReceived;\cf4 \strokec4 \
\
\cf2 \strokec2 //     // function pay() external payable\{\cf4 \strokec4 \
\cf2 \strokec2 //     //     payReceived += msg.value;\cf4 \strokec4 \
\cf2 \strokec2 //     // \}\cf4 \strokec4 \
\
\cf2 \strokec2 //     // receive() external payable \{\cf4 \strokec4 \
\cf2 \strokec2 //     //     receiver += msg.value;\cf4 \strokec4 \
\cf2 \strokec2 //     // \}\cf4 \strokec4 \
\
\cf2 \strokec2 //     // fallback() external payable \{\cf4 \strokec4 \
\cf2 \strokec2 //     //     fallbackReceived += msg.value;\cf4 \strokec4 \
\cf2 \strokec2 //     // \}\cf4 \strokec4 \
\cf2 \strokec2 //     //////////////////////////////////////////////////////\cf4 \strokec4 \
\
\cf2 \strokec2 //     //////////////////////////////////////////////////////\cf4 \strokec4 \
\cf2 \strokec2 //     ///////////////// Sending Ether //////////////////////\cf4 \strokec4 \
\cf2 \strokec2 //     //////////////////////////////////////////////////////\cf4 \strokec4 \
\
\cf2 \strokec2 //     ///// ======= First approach (send) ========///////////\cf4 \strokec4 \
\cf2 \strokec2 //     // function withDraw() public \{\cf4 \strokec4 \
\cf2 \strokec2 //     //     address payable user = payable(msg.sender);\cf4 \strokec4 \
\cf2 \strokec2 //     //     bool sent = user.send(address(this).balance);\cf4 \strokec4 \
\cf2 \strokec2 //     // \}\cf4 \strokec4 \
\
\cf2 \strokec2 //     ///// ====== Second approach (transfer) =======/////////\cf4 \strokec4 \
\cf2 \strokec2 //     // function withDraw() public \{\cf4 \strokec4 \
\cf2 \strokec2 //     //     address payable user = payable(msg.sender);\cf4 \strokec4 \
\cf2 \strokec2 //     //     user.transfer(address(this).balance);\cf4 \strokec4 \
\cf2 \strokec2 //     // \}\cf4 \strokec4 \
\
\cf2 \strokec2 //     ///// ======== Third approach (call) =========//////////\cf4 \strokec4 \
\cf2 \strokec2 //     // function withDraw() public\{\cf4 \strokec4 \
\cf2 \strokec2 //     //     address payable user = payable(msg.sender);\cf4 \strokec4 \
\cf2 \strokec2 //     //     // (bool sent,bytes memory data) = user.call\{value:address(this).balance\}("");\cf4 \strokec4 \
\cf2 \strokec2 //     //     // OR ///\cf4 \strokec4 \
\cf2 \strokec2 //     //     (bool sent,) = user.call\{value:address(this).balance\}("");\cf4 \strokec4 \
\cf2 \strokec2 //     // \}\cf4 \strokec4 \
\cf2 \strokec2 //     //////////// The previous call has a little problem ////////////\cf4 \strokec4 \
\cf2 \strokec2 //     /////////// The following example shows the problem ///////////\cf4 \strokec4 \
    \
\
\cf2 \strokec2 // \}\cf4 \strokec4 \
\
\
}